// Generated by cpp11: do not edit by hand
// clang-format off


#include "cpp11/declarations.hpp"
#include <R_ext/Visibility.h>

// convert_log_scale_inverse.cpp
cpp11::data_frame convert_log2_scale_inverse_cpp(cpp11::writable::list dt, cpp11::strings vars_to_transform, double smallest_value);
extern "C" SEXP _epikinetics_convert_log2_scale_inverse_cpp(SEXP dt, SEXP vars_to_transform, SEXP smallest_value) {
  BEGIN_CPP11
    return cpp11::as_sexp(convert_log2_scale_inverse_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::writable::list>>(dt), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(vars_to_transform), cpp11::as_cpp<cpp11::decay_t<double>>(smallest_value)));
  END_CPP11
}
// simulate_trajectories.cpp
cpp11::writable::data_frame simulate_trajectories_cpp(const data_frame & person_params);
extern "C" SEXP _epikinetics_simulate_trajectories_cpp(SEXP person_params) {
  BEGIN_CPP11
    return cpp11::as_sexp(simulate_trajectories_cpp(cpp11::as_cpp<cpp11::decay_t<const data_frame &>>(person_params)));
  END_CPP11
}

extern "C" {
static const R_CallMethodDef CallEntries[] = {
    {"_epikinetics_convert_log2_scale_inverse_cpp", (DL_FUNC) &_epikinetics_convert_log2_scale_inverse_cpp, 3},
    {"_epikinetics_simulate_trajectories_cpp",      (DL_FUNC) &_epikinetics_simulate_trajectories_cpp,      1},
    {NULL, NULL, 0}
};
}

extern "C" attribute_visible void R_init_epikinetics(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
